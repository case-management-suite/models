// code generated by "gen"; DO NOT EDIT

package models

import "fmt"

func _() Actor {
	var x = Actor{}
	_ = x.ID
	_ = x.CreatedAt
	_ = x.UpdatedAt
	_ = x.DeletedAt
	_ = x.CasesInvolved

	return x
}

type ActorSpec struct {
	ID            bool
	CreatedAt     bool
	UpdatedAt     bool
	DeletedAt     bool
	CasesInvolved bool
}

func (crs ActorSpec) GetIncludedFields() []string {
	res := []string{}

	if crs.ID {
		res = append(res, "ID")
	}
	if crs.CreatedAt {
		res = append(res, "CreatedAt")
	}
	if crs.UpdatedAt {
		res = append(res, "UpdatedAt")
	}
	if crs.DeletedAt {
		res = append(res, "DeletedAt")
	}
	if crs.CasesInvolved {
		res = append(res, "CasesInvolved")
	}
	return res
}

func (crs *ActorSpec) Set(key string, include bool) error {
	switch key {

	case "ID":
		crs.ID = include
		return nil

	case "CreatedAt":
		crs.CreatedAt = include
		return nil

	case "UpdatedAt":
		crs.UpdatedAt = include
		return nil

	case "DeletedAt":
		crs.DeletedAt = include
		return nil

	case "CasesInvolved":
		crs.CasesInvolved = include
		return nil

	default:
		return fmt.Errorf("the field does not exist: %s", key)
	}
}

func (crs ActorSpec) Get(key string) (bool, error) {
	switch key {

	case "ID":
		return crs.ID, nil
	case "CreatedAt":
		return crs.CreatedAt, nil
	case "UpdatedAt":
		return crs.UpdatedAt, nil
	case "DeletedAt":
		return crs.DeletedAt, nil
	case "CasesInvolved":
		return crs.CasesInvolved, nil
	default:
		return false, fmt.Errorf("the field does not exist: %s", key)
	}
}

func NewActorSpec(defaultValue bool) ActorSpec {
	return ActorSpec{

		ID:            defaultValue,
		CreatedAt:     defaultValue,
		UpdatedAt:     defaultValue,
		DeletedAt:     defaultValue,
		CasesInvolved: defaultValue,
	}
}

func (c ActorSpec) GetMap() map[string]bool {
	return map[string]bool{
		"ID": c.ID, "CreatedAt": c.CreatedAt, "UpdatedAt": c.UpdatedAt, "DeletedAt": c.DeletedAt, "CasesInvolved": c.CasesInvolved,
	}
}
